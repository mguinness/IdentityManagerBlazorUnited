@page "/users"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using System.Text.Json;
@using System.Timers;
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<PageTitle>Users</PageTitle>

<h1>User List</h1>

<button class="btn btn-primary mb-1" @onclick="NewUserModal">New</button>
<div class="search-box my-1 float-end">
    <input type="search" autofocus @bind="NameSearch" @bind:event="oninput" placeholder="Search user" />
</div>
<QuickGrid Class="table table-striped table-bordered" ItemsProvider="@usersProvider" Pagination="@pagination" @ref="usersGrid">
    <PropertyColumn Property="@(u => u.Id)" Sortable="true" />
    <PropertyColumn Property="@(u => u.Email)" Sortable="true" InitialSortDirection="SortDirection.Auto" />
    <PropertyColumn Property="@(u => u.UserName)" Sortable="true" />
    <PropertyColumn Property="@(u => u.DisplayName)" Sortable="false" />
    <PropertyColumn Property="@(u => string.Join(", ", u.Roles))" Title="Roles" Sortable="false" />
    <PropertyColumn Property="@(u => u.LockedOut)" Sortable="false" />
    <TemplateColumn Title="Actions">
        <button class="btn btn-outline-secondary" title="Edit" @onclick="@(() => ChangeUser(context))">
            <span class="bi bi-pencil-fill" aria-hidden="true"></span>
        </button>
        <button class="btn btn-outline-secondary" title="Delete" @onclick="@(async () => await DeleteUserAsync(context))">
            <span class="bi bi-trash-fill" aria-hidden="true"></span>
        </button>
        <button class="btn btn-outline-secondary" title="Password" @onclick="@(() => ChangePassword(context))">
            <span class="bi bi-key-fill" aria-hidden="true"></span>
        </button>
    </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination" />

<Modal @ref="newModal" Title="Add User">
    <Body>
        <div class="row">
            <form id="newForm" @onsubmit="@(async () => await AddNewUserAsync())">
                <div class="mb-3">
                    <label class="form-label">Username:</label>
                    <input type="text" class="form-control" placeholder="User Name" required @bind="@userNameField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Name:</label>
                    <input type="text" class="form-control" placeholder="Full Name" @bind="@fullNameField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Email:</label>
                    <input type="email" class="form-control" placeholder="Email" required @bind="@emailField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <input type="password" class="form-control" placeholder="Password" required @bind="@passwordField">
                </div>
            </form>
        </div>
    </Body>
    <Footer>
        <p class="text-danger me-auto">@newError</p>
        <button type="submit" class="btn btn-primary" form="newForm">Create</button>
        <button type="button" class="btn btn-secondary" @onclick="() => newModal.Close()">Cancel</button>
    </Footer>
</Modal>

<Modal @ref="editModal" Title="Edit User">
    <Body>
        <div class="row">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @TabClass(0)" @onclick="() => curTabIdx = 0">User</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @TabClass(1)" @onclick="() => curTabIdx = 1">Roles</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @TabClass(2)" @onclick="() => curTabIdx = 2">Claims</a>
                </li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane @TabClass(0)">
                    <form id="editForm" @onsubmit="@(async () => await UpdateUserAsync())">
                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <input type="email" class="form-control" placeholder="Email" required @bind="@emailField">
                        </div>
                        <div class="mb-3">
                            <input class="form-check-input" type="checkbox" @bind="@lockedField">
                            <label class="form-check-label">Locked:</label>
                        </div>
                    </form>
                </div>
                <div class="tab-pane @TabClass(1)">
                    <div class="mb-3">
                        @foreach (var role in allRoles)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@role.Key" checked="@roles.Contains(role.Value)" @onchange="eventArgs => CheckboxChanged(role.Value, eventArgs.Value)">
                                <label class="form-check-label">@role.Value</label>
                            </div>
                        }
                    </div>
                </div>
                <div class="tab-pane @TabClass(2)">
                    <table class="table table-sm table-borderless">
                        <tbody>
                            <tr>
                                <th>Type</th>
                                <th>Value</th>
                                <th>Action</th>
                            </tr>
                            @foreach (var claim in claims)
                            {
                                <tr>
                                    <td>@claim.Type</td>
                                    <td>@claim.Value</td>
                                    <td><a class="actionlink" @onclick="() => claims.Remove(claim)">Remove</a></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>
                                    <select @bind="@claimTypeField" class="form-select">
                                        <option></option>
                                        @foreach (var type in claimTypes)
                                        {
                                            <option>@type.Key</option>
                                        }
                                    </select>
                                </td>
                                <td><input type="text" class="form-control" @bind="@claimValueField"></td>
                                <td><a class="actionlink" @onclick="@(() => AddClaim())">Add</a></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </Body>
    <Footer>
        <p class="text-danger me-auto">@editError</p>
        <button type="submit" class="btn btn-primary" form="editForm">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="() => editModal.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="pwdModal" Title="Reset Password">
    <Body>
        <div class="row">
            <form id="pwdForm" @onsubmit="@(async () => await ResetPasswordAsync())">
                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <input type="password" class="form-control" placeholder="Password" required @bind="@passwordField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Verify:</label>
                    <input type="password" class="form-control" placeholder="Verify" required @bind="@verifyField">
                </div>
            </form>
        </div>
    </Body>
    <Footer>
        <p class="text-danger me-auto">@pwdError</p>
        <button type="submit" class="btn btn-primary" form="pwdForm">Reset</button>
        <button type="button" class="btn btn-secondary" @onclick="() => pwdModal.Close()">Cancel</button>
    </Footer>
</Modal>

@code {
    private int curTabIdx { get; set; } = 0;
    private string? TabClass(int idx) => curTabIdx == idx ? "active" : null;
    private Timer searchTimer = new Timer(1000);

    private Modal newModal { get; set; }
    private Modal editModal { get; set; }
    private Modal pwdModal { get; set; }

    string newError = string.Empty;
    string editError = string.Empty;
    string pwdError = string.Empty;

    Guid userIdField;
    string userNameField = String.Empty;
    string fullNameField = String.Empty;
    string emailField = String.Empty;
    string passwordField = String.Empty;
    string verifyField = String.Empty;
    bool lockedField = false;

    record UserList(int total, User[] data);
    record User(Guid Id, string Email, string LockedOut, string[] Roles, KeyValuePair<string, string>[] Claims, string DisplayName, string UserName);

    QuickGrid<User> usersGrid;
    GridItemsProvider<User>? usersProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    Dictionary<string, string> allRoles = new Dictionary<string, string>();
    Dictionary<string, string> claimTypes = new Dictionary<string, string>();

    List<string> roles = new List<string>();
    List<Claim> claims = new List<Claim>();

    string claimTypeField = String.Empty;
    string claimValueField = String.Empty;

    string nameSearch;
    string NameSearch
    {
        get => nameSearch;
        set
        {
            if (nameSearch != value)
            {
                nameSearch = value;
                searchTimer.Stop();
                searchTimer.Start();
            }
        }
    }

    private async void Elapsed_SearchAsync(object? sender, ElapsedEventArgs e)
    {
        await usersGrid.RefreshDataAsync();
    }

    void CheckboxChanged(string value, object isChecked)
    {
        if ((bool)isChecked)
            roles.Add(value);
        else
            roles.Remove(value);
    }

    void AddClaim()
    {
        if (!string.IsNullOrWhiteSpace(claimTypeField) && !string.IsNullOrWhiteSpace(claimValueField))
        {
            claims.Add(new Claim(claimTypeField, claimValueField));
            claimTypeField = String.Empty;
            claimValueField = String.Empty;
        }
    }

    void NewUserModal()
    {
        userNameField = String.Empty;
        fullNameField = String.Empty;
        emailField = String.Empty;
        passwordField = String.Empty;
        newModal.Open();
    }

    async Task AddNewUserAsync()
    {
        var response = await Http.PostAsync($"/api/identity/CreateUser?userName={userNameField}&name={fullNameField}&email={emailField}&password={passwordField}", null);
        if (response.IsSuccessStatusCode)
        {
            newModal.Close();
            await usersGrid.RefreshDataAsync();
        }
        else
            newError = await response.Content.ReadAsStringAsync();
    }

    void ChangeUser(User u)
    {
        userIdField = u.Id;
        emailField = u.Email;
        lockedField = u.LockedOut == "Yes";
        roles = new List<string>(u.Roles);

        claims.Clear();
        foreach (var claim in u.Claims)
            claims.Add(new Claim(claim.Key, claim.Value));

        claimTypeField = String.Empty;
        claimValueField = String.Empty;

        curTabIdx = 0;
        editModal.Open();
    }

    async Task UpdateUserAsync()
    {
        var dict = new Dictionary<string, object?>
            {
                ["id"] = userIdField,
                ["email"] = emailField,
                ["locked"] = lockedField
            };

        var i = 0;
        foreach (var claim in claims)
        {
            dict.Add($"claims[{i}].key", claim.Type);
            dict.Add($"claims[{i}].value", claim.Value);
            i++;
        }

        var j = 0;
        foreach (var role in roles)
            dict.Add($"roles[{j++}]", role);

        var url = NavManager.GetUriWithQueryParameters("/api/identity/updateuser", dict);

        var response = await Http.PostAsync(url, null);
        if (response.IsSuccessStatusCode)
        {
            editModal.Close();
            await usersGrid.RefreshDataAsync();
        }
        else
            editError = await response.Content.ReadAsStringAsync();
    }

    async Task DeleteUserAsync(User u)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"))
        {
            await Http.DeleteAsync($"/api/identity/DeleteUser?id={u.Id}");
            await usersGrid.RefreshDataAsync();
        }
    }

    void ChangePassword(User u)
    {
        userIdField = u.Id;
        passwordField = String.Empty;
        verifyField = String.Empty;
        pwdModal.Open();
    }

    async Task ResetPasswordAsync()
    {
        var response = await Http.PostAsync($"/api/identity/ResetPassword?id={userIdField}&password={passwordField}&verify={verifyField}", null);
        if (response.IsSuccessStatusCode)
            pwdModal.Close();
        else
            pwdError = await response.Content.ReadAsStringAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        searchTimer.AutoReset = false;
        searchTimer.Elapsed += Elapsed_SearchAsync;

        allRoles = await Http.GetFromJsonAsync<Dictionary<string, string>>("/api/identity/roleslist");
        claimTypes = await Http.GetFromJsonAsync<Dictionary<string, string>>("/api/identity/claimslist");

        usersProvider = async req =>
        {
            var sortList = new List<string>();

            foreach (var item in req.GetSortByProperties())
                sortList.Add(item.PropertyName + " " + (item.Direction == SortDirection.Descending ? "DESC" : "ASC"));

            var url = NavManager.GetUriWithQueryParameters("/api/identity/userlist", new Dictionary<string, object?>
                {
                { "skip", req.StartIndex },
                { "limit", req.Count },
                { "sort", String.Join(",", sortList) },
                { "search", nameSearch },
                });

            var response = await Http.GetFromJsonAsync<UserList>(url, req.CancellationToken);
            return GridItemsProviderResult.From(items: response.data, totalItemCount: response.total);
        };
    }
}
